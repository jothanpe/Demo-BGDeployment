version: 2.1
commands:
  destroy_environment:
    steps:
      - run:
          name: Destroying by failure
          command: |
            aws cloudformation delete-stack --stack-name prod-${CIRCLE_WORKFLOW_ID}
jobs:
  # create_infrastructure:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Creating Cloudformation stack
  #         command: |
  #           aws cloudformation deploy --stack-name prod-${CIRCLE_WORKFLOW_ID} --region $AWS_DEFAULT_REGION --template-body file://template.yml
  #     - run: return 1
  #     - destroy_environment
  #       when: on_fail
  create_and_deploy_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Deploy S3
          command: |
            aws cloudformation deploy \
            --template-file bucket.yml \
            --stack-name "FE-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides NAME="fe-${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Copy files to S3
          command: |
            aws s3 sync . s3://"fe-${CIRCLE_WORKFLOW_ID:0:7}" --delete
  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: List last execution
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
            --no-paginate --output text > /tmp/pipelineid-last
      - run: 
          name: Install dependencies
          command: yum install -y tar gzip
      - persist_to_workspace:
          root: /tmp
          paths: [pipelineid-last]
  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Promote to Production
          command: |
            aws cloudformation deploy \
            --template-file cloudfront.yml \
            --stack-name production-distro \
            --parameter-overrides PipelineID="fe-${CIRCLE_WORKFLOW_ID:0:7}"
  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: Install dependencies
          command: yum install -y tar gzip
      - attach_workspace:
          at: /tmp
      - run: |
          cat /tmp/pipelineid-last
          export PreviousPipelineID=$(cat /tmp/pipelineid-last)
          cat $PreviousPipelineID
      - run:
          name: Cleanup old frontend
          command: |
            aws s3 rm "s3://${PreviousPipelineID}" --recursive
            aws cloudformation delete-stack --stack-name "${PreviousPipelineID}"
  # execute_ansible_playbook:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints:
  #           - "64:d5:f1:45:24:78:e0:e8:5d:5e:f9:87:26:98:ea:1b"
  #     - run:
  #         name: Adding OpenSSH
  #         command: apk add openssh-client
  #     - run:
  #         name: Keyscan
  #         command: ssh-keyscan -H 54.227.87.42 >> ~/.ssh/known_hosts
  #     - run:
  #         name: Installing dependencies
  #         command: |
  #           apk add --update ansible
  #     - run:
  #         name: Running Ansible
  #         command: ansible-playbook main-remote.yml -i inventory
  # smoke_test:
  #   docker:
  #     - image: alpine:latest
  #   steps:
  #     - run: apk add --update curl
  #     - run:
  #         name: Smoke Test
  #         command: |
  #           URL="https://blog.udacity.com/"
  #           if curl -s --head ${URL} # test if blog.udacity. com exists
  #           then
  #             return 0
  #           else
  #             return 1
  #           fi

workflows:
  cloudformation-deployment:
    jobs:
      # - create_infrastructure
      # - execute_ansible_playbook
      # - smoke_test
      - create_and_deploy_front_end
      - get_last_deployment_id:
          requires:
            - create_and_deploy_front_end
      - promote_to_production:
          requires:
            - get_last_deployment_id
      - clean_up_old_front_end:
          requires:
            - promote_to_production
